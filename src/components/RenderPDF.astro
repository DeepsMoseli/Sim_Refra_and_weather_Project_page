---
import fs from "fs";
import { getDocument } from "pdfjs-dist/legacy/build/pdf.mjs";

interface Props {
  source: string;
}
const { source } = Astro.props;

const pdfPath = "." + source;
const outputPath = pdfPath + ".webp";
const webPath = source + ".webp";
const data = new Uint8Array(fs.readFileSync(pdfPath));

// Load the PDF file.
const loadingTask = getDocument({
  data,
  // cMapUrl: CMAP_URL,
  // cMapPacked: CMAP_PACKED,
  // standardFontDataUrl: STANDARD_FONT_DATA_URL,
});

try {
  const pdfDocument = await loadingTask.promise;
  console.log("# PDF document loaded.");
  // Get the first page.
  const page = await pdfDocument.getPage(1);
  // Render the page on a Node canvas with 100% scale.
  const canvasFactory = pdfDocument.canvasFactory as any;
  const viewport = page.getViewport({ scale: 1.0 });
  const canvasAndContext = canvasFactory.create(
    viewport.width,
    viewport.height
  );
  const renderContext = {
    canvasContext: canvasAndContext.context,
    viewport,
    canvas: canvasAndContext.canvas,
  };

  const renderTask = page.render(renderContext);
  await renderTask.promise;
  // Convert the canvas to an image buffer.
  const image = canvasAndContext.canvas.toBuffer("image/webp");
  fs.writeFile(outputPath, image, function (error) {
    if (error) {
      console.error("Error: " + error);
    } else {
      console.log(`Finished converting PDF to WebP: ${outputPath}`);
    }
  });
  // Release page resources.
  page.cleanup();
} catch (reason) {
  console.log(reason);
}
---

<img src={webPath} alt="PDF page rendered as image" width="100%" />
