---
// https://github.com/mozilla/pdf.js/blob/master/examples/node/pdf2png/pdf2png.mjs

import fs from 'fs'
import { getDocument } from 'pdfjs-dist/legacy/build/pdf.mjs'
import { Image } from 'astro:assets'
interface Props {
    filename: string
    altText: string
    ignorecache?: boolean
    invertInDarkMode?: boolean
}
const {
    filename,
    altText,
    ignorecache = false,
    invertInDarkMode = false,
} = Astro.props

const outputFilename = filename + '.webp'
const outputPath = `./src/assets/converted-pdfs/${outputFilename}`

const data = new Uint8Array(fs.readFileSync(`./src/assets/${filename}`))

// Where the standard fonts are located.
const STANDARD_FONT_DATA_URL = '../../node_modules/pdfjs-dist/standard_fonts/'

const loadingTask = getDocument({
    data,
    standardFontDataUrl: STANDARD_FONT_DATA_URL,
})
const pdfDocument = await loadingTask.promise
const page = await pdfDocument.getPage(1)
const viewport = page.getViewport({ scale: 2 })
const width = viewport.width
const height = viewport.height

// Check if the output file already exists.
if (!ignorecache && fs.existsSync(outputPath)) {
    page.cleanup()
} else {
    try {
        // Render the page on a Node canvas with 100% scale.
        const canvasFactory = pdfDocument.canvasFactory as any
        const canvasAndContext = canvasFactory.create(width, height)
        const renderContext = {
            canvasContext: canvasAndContext.context,
            viewport,
            canvas: canvasAndContext.canvas,
        }

        const renderTask = page.render(renderContext)
        await renderTask.promise

        // Convert the canvas to an image buffer.
        const image = canvasAndContext.canvas.toBuffer('image/webp')
        fs.writeFile(outputPath, image, function (error) {
            if (error) {
                console.error('Error: ' + error)
            }
        })

        // Release page resources.
        page.cleanup()
    } catch (reason) {
        console.log(reason)
    }
}

const image: ImageMetadata = {
    src: `/@fs/${outputPath}`,
    width: width,
    height: height,
    format: 'webp',
}
---

<Image
    class={`rounded-lg max-h-[35rem] w-max object-contain !px-0 ${invertInDarkMode && 'dark:invert'}`}
    src={image}
    alt={altText}
/>
